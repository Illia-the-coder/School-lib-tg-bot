import logging
from aiogram import *
from aiogram.types import *
from config import token
from literatureClient import *

bot = Bot(token=token)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

user_data ={}
grade_=[f"{n} –∫–ª–∞—Å" for n in range(5,12)]
type_=['–°–≤—ñ—Ç–æ–≤–∞','–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞']
list_choose = [f'{grade} –∫–ª–∞—Å {type}' for grade in range(5, 12) for type in ['–°–≤—ñ—Ç–æ–≤–∞', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞']]
commands = ['–ê–≤—Ç–æ—Ä–∏','üé≤random','üìÉ–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥','üéì–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó','üìî–¢–≤–æ—Ä–∏ —Å–∫–æ—Ä–æ—á–µ–Ω–æ','üìó–ê–Ω–∞–ª—ñ–∑–∏','üîâ–ê—É–¥—ñ–æ–∫–Ω–∏–≥–∏ —Ç–≤–æ—Ä—ñ–≤']
msg_='''–û–±–µ—Ä–∏:'''


def user_id_cof(message): 
    return user_data[int(message.from_user.id)]

def inline(list_, first_ = False,rows=3):
    list__  = list(list_)+['üëà–Ω–∞–∑–∞–¥'] if not first_ else list_
    return types.InlineKeyboardMarkup(row_width = rows).add(*[InlineKeyboardButton(text=x, callback_data=x) for x in list__])

def func_inline(call,text,arr_but,rows = 3,first = False,html=True):
    if html: return lambda: bot.send_message(call.from_user.id,text, reply_markup=inline(arr_but,first_=first,rows = rows), parse_mode=types.ParseMode.HTML)
    return lambda: bot.send_message(call.from_user.id,text, reply_markup=inline(arr_but,first_=first,rows = rows))

async def update_level(call,func = None,back = False):
    n=1
    try:
        await bot.delete_message(call.from_user.id,call.message.message_id)
        if back: 
            func = user_id_cof(call)['prev'][user_id_cof(call)['level']-1]
            n=-1
        else: user_id_cof(call)['prev'][user_id_cof(call)['level']+1] = func
        await func()
    except Exception as e: 
        await bot.send_message(call.from_user.id,f'–ü–æ–º–∏–ª–∫–∞ {e}', reply_markup=inline([]))
    user_id_cof(call)['level'] +=n
    
@dp.message_handler(commands="start")
async def start(message: types.Message):
    await message.reply("""–î–æ–±—Ä–æ–≥–æ –¥–Ω—è üëã.–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –∑ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∏üìö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ‚ö°‚ö°‚ö°! –¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏:\nüßî–ë—ñ–æ–≥—Ä–∞—Ñ—ñ—ó –∞–≤—Ç–æ—Ä—ñ–≤\n üìî–ü–µ—Ä–µ–∫–∞–∑–∏\n üîâ–ê—É–¥—ñ–æ–∫–Ω–∏–≥–∏\n üìó–ê–Ω–∞–ª—ñ–∑–∏ —Ç–≤–æ—Ä—ñ–≤\n üéì–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó –ø–æ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—è–º –∞–≤—Ç–æ—Ä—ñ–≤\n üìÉ–°–ø–∏—Å–∫–∏ —Ç–≤–æ—Ä—ñ–≤ –∑–∞ –∫–æ–∂–µ–Ω –∫–ª–∞—Å""")
    func = func_inline(message,"–û–±–µ—Ä–∏ –∫–ª–∞—Å, –¥–µ —Ç–∏ –≤—á–∏—à—Å—è:",grade_,first=True)
    user_data[int(message.from_user.id)] = {'prev':{0:func},'level':0}
    await func()

@dp.callback_query_handler(text=grade_) 
async def random_value(call: types.CallbackQuery): 
    user_data[call.from_user.id]['clas']=call.data 
    user_data[call.from_user.id]['BSCH']=BSCH(call.data)
    user_data[call.from_user.id]['subjs']=BSCH(call.data).subj 
    await update_level(call,func_inline(call,'–û–±–µ—Ä–∏: ',arr_but = ['üìì–®–∫—ñ–ª—å–Ω—ñ –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏','üóÇ–®–∫—ñ–ª—å–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞'], html= False,rows=2)) 
    # mesg = '–ê —Ç–µ–ø–µ—Ä —á–∞—Å –æ–±—Ä–∞—Ç–∏ –∫—É—Ä—Å –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∏: ' 
    # await update_level(call,func_inline(call,mesg,arr_but = type_, html= False)) 
 
@dp.callback_query_handler(text=['üìì–®–∫—ñ–ª—å–Ω—ñ –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏','üóÇ–®–∫—ñ–ª—å–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞']) 
async def random_value(call: types.CallbackQuery): 
    if call.data=='üìì–®–∫—ñ–ª—å–Ω—ñ –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏': 
        
        func=func_inline(call,'–û–±–µ—Ä–∏: ',arr_but = user_id_cof(call)['BSCH'].subj, html= False,rows=1)
        
    elif call.data == 'üóÇ–®–∫—ñ–ª—å–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞': 
        mesg = '–ê —Ç–µ–ø–µ—Ä —á–∞—Å –æ–±—Ä–∞—Ç–∏ –∫—É—Ä—Å –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∏: ' 
        func=func_inline(call,mesg,arr_but = type_, html= False) 
    await update_level(call,func) 
 
 
@dp.callback_query_handler(text=type_) 
async def random_value(call: types.CallbackQuery): 
    datalist=user_id_cof(call) 
    user_data[call.from_user.id]['data'] = f'{datalist["clas"]} {call.data}'
    await update_level(call,func_inline(call,msg_,commands,2)) 
    

@dp.callback_query_handler(text= commands)
async def choosing_next(call: types.CallbackQuery):
    DF=DB(user_id_cof(call)['data'])
    if call.data == '–ê–≤—Ç–æ—Ä–∏':
        func = func_inline(call,'–û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ—Ä–∞: ',DF.authors ,2)
    elif call.data == 'üìÉ–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥':
        func = func_inline(call,DF.list_all(),[] ,1)
    elif call.data == 'üéì–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó':
        PR=DF.pres_data
        user_id_cof(call).update({'pres':PR})
        func = func_inline(call,f'{call.data}\n–û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ—Ä–∞: ',PR.keys(),1)
    elif call.data == 'üé≤random':
        DF_rnd=DF.get_rnd()
        RND_auth = DF_rnd[0]
        RND_book = DF_rnd[1]
        DF_RND = DF_rnd[2]
        decs =f"<img src = '{DF_RND['img_src']}'><h3>–ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è</h3>\n{DF_RND['bio']}\n{DF.get_content_tlgrph(RND_auth,RND_book)[1]}"
        user_id_cof(call).update({'author':DF.rnd_auth,'book':DF.rnd_book})
        func = func_inline(call, create_tlgrph(f'{RND_auth}/{RND_book}', decs), [],1)
    elif call.data in ['üìî–¢–≤–æ—Ä–∏ —Å–∫–æ—Ä–æ—á–µ–Ω–æ', 'üìó–ê–Ω–∞–ª—ñ–∑–∏', 'üîâ–ê—É–¥—ñ–æ–∫–Ω–∏–≥–∏ —Ç–≤–æ—Ä—ñ–≤']:
        user_id_cof(call)['add']= DF.get_adding(call.data)
        func = func_inline(call,f'{call.data}\n–û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ—Ä–∞: ', DF.get_adding(call.data).keys() ,1)
    await update_level(call,func)


@dp.callback_query_handler(text=['üëà–Ω–∞–∑–∞–¥'])
async def back(call: types.CallbackQuery):
    await update_level(call,back = True)


@dp.callback_query_handler()
async def base(call: types.CallbackQuery):
    data_list=user_id_cof(call)
    if 'add' in data_list.keys() or 'pres' in data_list.keys():
        if call.data[0] in ['üìó','üìî','üîâ']:
            if call.data in data_list['add'].keys():
                user_id_cof(call)['add_author']= call.data
                func = func_inline(call,f'<b>{call.data}</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–≤—ñ—Ä:', data_list['add'][call.data].keys(), 1)
            elif 'add_author' in data_list.keys() and call.data in data_list['add'][data_list['add_author']].keys():
                    add_book_data= data_list['add'][data_list['add_author']][call.data]
                    func = func_inline(call, create_tlgrph(call.data,add_book_data), [],1)
            await update_level(call,func)
        elif call.data[0] == 'üéì':
            func = func_inline(call,create_tlgrph(f'{call.data}(–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó)',user_id_cof(call)['pres'][call.data]) ,[],1)
            await update_level(call,func)
            
    elif 'data' in data_list.keys():
        DF = DB(data_list['data'])

        if call.data in DF.authors:
            user_id_cof(call)['author'] = call.data
            author_data= DF.get_bio(call.data)
            keyboard =inline(DF.get_books(call.data),rows =1)
            func = lambda: bot.send_photo(call.from_user.id, author_data['img_src'],caption=f"{author_data['bio']}\n–û–±–µ—Ä—ñ—Ç—å —Ç–≤—ñ—Ä", parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
        
        elif 'author' in data_list.keys():
            if call.data in DF.get_books(data_list['author']):
                user_id_cof(call)['book'] = call.data
                func = func_inline(call, create_tlgrph( *DF.get_content_tlgrph(data_list['author'], call.data)), [])
    #School books 
    elif 'subjs' in data_list.keys(): 
        print('v`')
        if call.data in user_data[call.from_user.id]['subjs']: 
            func=func_inline(call,user_data[call.from_user.id]['BSCH'][call.data],arr_but= []) 
        
    await update_level(call,func)

    
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
    
